// Generated by rstantools.  Do not edit by hand.

/*
    sccomp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sccomp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sccomp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_glm_multi_beta_binomial_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'glm_multi_beta_binomial', line 126, column 2 to column 30)",
                                                      " (in 'glm_multi_beta_binomial', line 127, column 2 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 129, column 2 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 130, column 2 to column 24)",
                                                      " (in 'glm_multi_beta_binomial', line 131, column 2 to column 31)",
                                                      " (in 'glm_multi_beta_binomial', line 133, column 2 to column 82)",
                                                      " (in 'glm_multi_beta_binomial', line 135, column 2 to column 56)",
                                                      " (in 'glm_multi_beta_binomial', line 136, column 2 to column 59)",
                                                      " (in 'glm_multi_beta_binomial', line 137, column 2 to column 73)",
                                                      " (in 'glm_multi_beta_binomial', line 139, column 2 to column 52)",
                                                      " (in 'glm_multi_beta_binomial', line 142, column 2 to column 23)",
                                                      " (in 'glm_multi_beta_binomial', line 143, column 2 to column 41)",
                                                      " (in 'glm_multi_beta_binomial', line 144, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 146, column 2 to column 54)",
                                                      " (in 'glm_multi_beta_binomial', line 147, column 2 to column 41)",
                                                      " (in 'glm_multi_beta_binomial', line 148, column 2 to column 52)",
                                                      " (in 'glm_multi_beta_binomial', line 149, column 16 to column 70)",
                                                      " (in 'glm_multi_beta_binomial', line 149, column 2 to column 70)",
                                                      " (in 'glm_multi_beta_binomial', line 151, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 154, column 4 to column 121)",
                                                      " (in 'glm_multi_beta_binomial', line 158, column 17 to column 20)",
                                                      " (in 'glm_multi_beta_binomial', line 158, column 6 to column 69)",
                                                      " (in 'glm_multi_beta_binomial', line 162, column 8 to column 57)",
                                                      " (in 'glm_multi_beta_binomial', line 161, column 8 to line 162, column 57)",
                                                      " (in 'glm_multi_beta_binomial', line 160, column 37 to line 163, column 7)",
                                                      " (in 'glm_multi_beta_binomial', line 160, column 6 to line 163, column 7)",
                                                      " (in 'glm_multi_beta_binomial', line 165, column 6 to column 65)",
                                                      " (in 'glm_multi_beta_binomial', line 156, column 27 to line 166, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 156, column 4 to line 166, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 174, column 8 to column 180)",
                                                      " (in 'glm_multi_beta_binomial', line 172, column 8 to column 171)",
                                                      " (in 'glm_multi_beta_binomial', line 171, column 11 to line 174, column 180)",
                                                      " (in 'glm_multi_beta_binomial', line 170, column 8 to column 167)",
                                                      " (in 'glm_multi_beta_binomial', line 169, column 6 to line 174, column 180)",
                                                      " (in 'glm_multi_beta_binomial', line 168, column 26 to line 175, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 168, column 4 to line 175, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 153, column 27 to line 176, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 153, column 2 to line 176, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 263, column 2 to column 40)",
                                                      " (in 'glm_multi_beta_binomial', line 265, column 2 to column 46)",
                                                      " (in 'glm_multi_beta_binomial', line 270, column 18 to column 78)",
                                                      " (in 'glm_multi_beta_binomial', line 270, column 4 to column 78)",
                                                      " (in 'glm_multi_beta_binomial', line 269, column 6 to line 271, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 267, column 28 to column 88)",
                                                      " (in 'glm_multi_beta_binomial', line 267, column 14 to column 88)",
                                                      " (in 'glm_multi_beta_binomial', line 267, column 4 to column 88)",
                                                      " (in 'glm_multi_beta_binomial', line 266, column 25 to line 268, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 266, column 2 to line 271, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 273, column 2 to column 62)",
                                                      " (in 'glm_multi_beta_binomial', line 274, column 25 to column 91)",
                                                      " (in 'glm_multi_beta_binomial', line 274, column 2 to column 91)",
                                                      " (in 'glm_multi_beta_binomial', line 180, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial', line 180, column 14 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 180, column 4 to column 20)",
                                                      " (in 'glm_multi_beta_binomial', line 181, column 11 to column 14)",
                                                      " (in 'glm_multi_beta_binomial', line 181, column 4 to column 25)",
                                                      " (in 'glm_multi_beta_binomial', line 182, column 11 to column 14)",
                                                      " (in 'glm_multi_beta_binomial', line 182, column 4 to column 32)",
                                                      " (in 'glm_multi_beta_binomial', line 183, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial', line 183, column 14 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 183, column 4 to column 37)",
                                                      " (in 'glm_multi_beta_binomial', line 189, column 9 to column 34)",
                                                      " (in 'glm_multi_beta_binomial', line 186, column 6 to column 112)",
                                                      " (in 'glm_multi_beta_binomial', line 187, column 6 to column 53)",
                                                      " (in 'glm_multi_beta_binomial', line 185, column 29 to line 188, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 185, column 4 to line 189, column 34)",
                                                      " (in 'glm_multi_beta_binomial', line 191, column 19 to column 44)",
                                                      " (in 'glm_multi_beta_binomial', line 191, column 4 to column 44)",
                                                      " (in 'glm_multi_beta_binomial', line 193, column 4 to column 29)",
                                                      " (in 'glm_multi_beta_binomial', line 194, column 4 to column 48)",
                                                      " (in 'glm_multi_beta_binomial', line 196, column 4 to line 201, column 9)",
                                                      " (in 'glm_multi_beta_binomial', line 179, column 19 to line 202, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 179, column 2 to line 202, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 241, column 7 to column 67)",
                                                      " (in 'glm_multi_beta_binomial', line 240, column 10 to line 242, column 6)",
                                                      " (in 'glm_multi_beta_binomial', line 236, column 39 to column 99)",
                                                      " (in 'glm_multi_beta_binomial', line 236, column 7 to column 99)",
                                                      " (in 'glm_multi_beta_binomial', line 237, column 70 to column 108)",
                                                      " (in 'glm_multi_beta_binomial', line 237, column 34 to column 108)",
                                                      " (in 'glm_multi_beta_binomial', line 237, column 8 to column 108)",
                                                      " (in 'glm_multi_beta_binomial', line 235, column 37 to line 238, column 6)",
                                                      " (in 'glm_multi_beta_binomial', line 235, column 5 to line 242, column 6)",
                                                      " (in 'glm_multi_beta_binomial', line 233, column 6 to line 243, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 223, column 6 to line 230, column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 222, column 8 to line 231, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 209, column 6 to line 216, column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 208, column 6 to line 216, column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 218, column 70 to column 117)",
                                                      " (in 'glm_multi_beta_binomial', line 218, column 34 to column 117)",
                                                      " (in 'glm_multi_beta_binomial', line 218, column 8 to column 117)",
                                                      " (in 'glm_multi_beta_binomial', line 206, column 36 to line 219, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 206, column 4 to line 231, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 204, column 25 to line 232, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 204, column 2 to line 243, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 245, column 2 to column 46)",
                                                      " (in 'glm_multi_beta_binomial', line 246, column 24 to column 79)",
                                                      " (in 'glm_multi_beta_binomial', line 246, column 10 to column 79)",
                                                      " (in 'glm_multi_beta_binomial', line 246, column 2 to column 79)",
                                                      " (in 'glm_multi_beta_binomial', line 248, column 4 to column 22)",
                                                      " (in 'glm_multi_beta_binomial', line 249, column 4 to column 77)",
                                                      " (in 'glm_multi_beta_binomial', line 250, column 4 to column 68)",
                                                      " (in 'glm_multi_beta_binomial', line 251, column 4 to column 55)",
                                                      " (in 'glm_multi_beta_binomial', line 254, column 26 to column 66)",
                                                      " (in 'glm_multi_beta_binomial', line 254, column 6 to column 66)",
                                                      " (in 'glm_multi_beta_binomial', line 255, column 6 to column 48)",
                                                      " (in 'glm_multi_beta_binomial', line 256, column 6 to column 47)",
                                                      " (in 'glm_multi_beta_binomial', line 257, column 6 to column 50)",
                                                      " (in 'glm_multi_beta_binomial', line 259, column 4 to column 41)",
                                                      " (in 'glm_multi_beta_binomial', line 253, column 29 to line 260, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 253, column 4 to line 260, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 65, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 66, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 67, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 68, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 69, column 2 to column 35)",
                                                      " (in 'glm_multi_beta_binomial', line 70, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial', line 71, column 15 to column 16)",
                                                      " (in 'glm_multi_beta_binomial', line 71, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial', line 72, column 8 to column 9)",
                                                      " (in 'glm_multi_beta_binomial', line 72, column 10 to column 11)",
                                                      " (in 'glm_multi_beta_binomial', line 72, column 2 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 73, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 73, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 73, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 74, column 9 to column 11)",
                                                      " (in 'glm_multi_beta_binomial', line 74, column 13 to column 14)",
                                                      " (in 'glm_multi_beta_binomial', line 74, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 75, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 75, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 75, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial', line 77, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 78, column 20 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 78, column 22 to column 23)",
                                                      " (in 'glm_multi_beta_binomial', line 78, column 2 to column 25)",
                                                      " (in 'glm_multi_beta_binomial', line 79, column 22 to column 23)",
                                                      " (in 'glm_multi_beta_binomial', line 79, column 24 to column 25)",
                                                      " (in 'glm_multi_beta_binomial', line 79, column 2 to column 27)",
                                                      " (in 'glm_multi_beta_binomial', line 80, column 2 to column 30)",
                                                      " (in 'glm_multi_beta_binomial', line 81, column 45 to column 48)",
                                                      " (in 'glm_multi_beta_binomial', line 81, column 2 to column 50)",
                                                      " (in 'glm_multi_beta_binomial', line 82, column 2 to column 30)",
                                                      " (in 'glm_multi_beta_binomial', line 84, column 2 to column 32)",
                                                      " (in 'glm_multi_beta_binomial', line 85, column 2 to column 28)",
                                                      " (in 'glm_multi_beta_binomial', line 86, column 2 to column 25)",
                                                      " (in 'glm_multi_beta_binomial', line 88, column 2 to column 39)",
                                                      " (in 'glm_multi_beta_binomial', line 89, column 2 to column 61)",
                                                      " (in 'glm_multi_beta_binomial', line 90, column 2 to column 33)",
                                                      " (in 'glm_multi_beta_binomial', line 92, column 2 to column 45)",
                                                      " (in 'glm_multi_beta_binomial', line 94, column 2 to column 26)",
                                                      " (in 'glm_multi_beta_binomial', line 95, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial', line 96, column 34 to column 53)",
                                                      " (in 'glm_multi_beta_binomial', line 96, column 2 to column 58)",
                                                      " (in 'glm_multi_beta_binomial', line 97, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 98, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 98, column 12 to column 22)",
                                                      " (in 'glm_multi_beta_binomial', line 98, column 2 to column 43)",
                                                      " (in 'glm_multi_beta_binomial', line 99, column 34 to column 44)",
                                                      " (in 'glm_multi_beta_binomial', line 99, column 2 to column 49)",
                                                      " (in 'glm_multi_beta_binomial', line 102, column 9 to column 12)",
                                                      " (in 'glm_multi_beta_binomial', line 102, column 2 to column 40)",
                                                      " (in 'glm_multi_beta_binomial', line 103, column 2 to column 42)",
                                                      " (in 'glm_multi_beta_binomial', line 104, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 104, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 104, column 2 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 105, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 105, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 105, column 2 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 106, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 106, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 106, column 2 to column 29)",
                                                      " (in 'glm_multi_beta_binomial', line 107, column 14 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 107, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 108, column 28 to column 31)",
                                                      " (in 'glm_multi_beta_binomial', line 108, column 2 to column 33)",
                                                      " (in 'glm_multi_beta_binomial', line 109, column 21 to column 24)",
                                                      " (in 'glm_multi_beta_binomial', line 109, column 2 to column 26)",
                                                      " (in 'glm_multi_beta_binomial', line 111, column 2 to column 37)",
                                                      " (in 'glm_multi_beta_binomial', line 112, column 2 to column 54)",
                                                      " (in 'glm_multi_beta_binomial', line 117, column 4 to column 14)",
                                                      " (in 'glm_multi_beta_binomial', line 118, column 4 to column 52)",
                                                      " (in 'glm_multi_beta_binomial', line 121, column 2 to column 28)",
                                                      " (in 'glm_multi_beta_binomial', line 122, column 2 to column 55)",
                                                      " (in 'glm_multi_beta_binomial', line 123, column 2 to column 41)",
                                                      " (in 'glm_multi_beta_binomial', line 126, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 126, column 12 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 127, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 127, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 133, column 9 to column 54)",
                                                      " (in 'glm_multi_beta_binomial', line 133, column 56 to column 59)",
                                                      " (in 'glm_multi_beta_binomial', line 135, column 33 to column 54)",
                                                      " (in 'glm_multi_beta_binomial', line 136, column 36 to column 57)",
                                                      " (in 'glm_multi_beta_binomial', line 137, column 13 to column 44)",
                                                      " (in 'glm_multi_beta_binomial', line 139, column 29 to column 50)",
                                                      " (in 'glm_multi_beta_binomial', line 142, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 142, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial', line 143, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 143, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 144, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 144, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial', line 146, column 9 to column 20)",
                                                      " (in 'glm_multi_beta_binomial', line 146, column 22 to column 25)",
                                                      " (in 'glm_multi_beta_binomial', line 147, column 13 to column 16)",
                                                      " (in 'glm_multi_beta_binomial', line 148, column 9 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 148, column 21 to column 24)",
                                                      " (in 'glm_multi_beta_binomial', line 263, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial', line 263, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 265, column 9 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 265, column 21 to column 22)",
                                                      " (in 'glm_multi_beta_binomial', line 3, column 12 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 3, column 4 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 5, column 6 to column 38)",
                                                      " (in 'glm_multi_beta_binomial', line 6, column 6 to column 43)",
                                                      " (in 'glm_multi_beta_binomial', line 4, column 18 to line 7, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 4, column 4 to line 7, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 8, column 4 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 2, column 33 to line 9, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 11, column 4 to column 36)",
                                                      " (in 'glm_multi_beta_binomial', line 12, column 16 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 12, column 4 to column 21)",
                                                      " (in 'glm_multi_beta_binomial', line 13, column 4 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 15, column 6 to column 39)",
                                                      " (in 'glm_multi_beta_binomial', line 16, column 6 to column 42)",
                                                      " (in 'glm_multi_beta_binomial', line 14, column 19 to line 17, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 14, column 4 to line 17, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 18, column 4 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 19, column 4 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 10, column 58 to line 20, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 22, column 4 to column 36)",
                                                      " (in 'glm_multi_beta_binomial', line 23, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 23, column 4 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 24, column 4 to column 19)",
                                                      " (in 'glm_multi_beta_binomial', line 26, column 6 to column 39)",
                                                      " (in 'glm_multi_beta_binomial', line 27, column 6 to column 42)",
                                                      " (in 'glm_multi_beta_binomial', line 25, column 19 to line 28, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 25, column 4 to line 28, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 29, column 4 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 30, column 4 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 21, column 57 to line 31, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 33, column 4 to column 20)",
                                                      " (in 'glm_multi_beta_binomial', line 34, column 10 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 34, column 4 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 35, column 4 to column 16)",
                                                      " (in 'glm_multi_beta_binomial', line 38, column 8 to column 22)",
                                                      " (in 'glm_multi_beta_binomial', line 39, column 8 to column 17)",
                                                      " (in 'glm_multi_beta_binomial', line 37, column 21 to line 40, column 7)",
                                                      " (in 'glm_multi_beta_binomial', line 37, column 6 to line 40, column 7)",
                                                      " (in 'glm_multi_beta_binomial', line 36, column 19 to line 41, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 36, column 4 to line 41, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 42, column 4 to column 13)",
                                                      " (in 'glm_multi_beta_binomial', line 32, column 33 to line 43, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 45, column 4 to line 46, column 56)",
                                                      " (in 'glm_multi_beta_binomial', line 44, column 40 to line 47, column 3)",
                                                      " (in 'glm_multi_beta_binomial', line 49, column 4 to column 16)",
                                                      " (in 'glm_multi_beta_binomial', line 59, column 6 to column 91)",
                                                      " (in 'glm_multi_beta_binomial', line 58, column 11 to line 60, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 53, column 6 to line 56, column 8)",
                                                      " (in 'glm_multi_beta_binomial', line 52, column 6 to line 56, column 8)",
                                                      " (in 'glm_multi_beta_binomial', line 51, column 49 to line 58, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 51, column 4 to line 60, column 5)",
                                                      " (in 'glm_multi_beta_binomial', line 61, column 4 to column 15)",
                                                      " (in 'glm_multi_beta_binomial', line 48, column 172 to line 62, column 3)"};
Eigen::Matrix<double, -1, 1>
Q_sum_to_zero_QR(const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 209;
    validate_non_negative_index("Q_r", "2 * N", (2 * N));
    Eigen::Matrix<local_scalar_t__, -1, 1> Q_r;
    Q_r = Eigen::Matrix<local_scalar_t__, -1, 1>((2 * N));
    stan::math::fill(Q_r, DUMMY_VAR__);
    
    current_statement__ = 214;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 211;
      assign(Q_r, cons_list(index_uni(i), nil_index_list()),
        -stan::math::sqrt(((N - i) / ((N - i) + 1.0))),
        "assigning variable Q_r");
      current_statement__ = 212;
      assign(Q_r, cons_list(index_uni((i + N)), nil_index_list()),
        inv_sqrt(((N - i) * ((N - i) + 1))), "assigning variable Q_r");}
    current_statement__ = 215;
    return Q_r;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct Q_sum_to_zero_QR_functor__ {
Eigen::Matrix<double, -1, 1>
operator()(const int& N, std::ostream* pstream__)  const 
{
return Q_sum_to_zero_QR(N, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
sum_to_zero_QR(const T0__& x_raw_arg__, const T1__& Q_r_arg__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x_raw = to_ref(x_raw_arg__);
  const auto& Q_r = to_ref(Q_r_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 217;
    N = (num_elements(x_raw) + 1);
    current_statement__ = 218;
    validate_non_negative_index("x", "N", N);
    Eigen::Matrix<local_scalar_t__, 1, -1> x;
    x = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
    stan::math::fill(x, DUMMY_VAR__);
    
    local_scalar_t__ x_aux;
    x_aux = DUMMY_VAR__;
    
    current_statement__ = 220;
    x_aux = 0;
    current_statement__ = 224;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 221;
      assign(x, cons_list(index_uni(i), nil_index_list()),
        (x_aux + (x_raw[(i - 1)] * Q_r[(i - 1)])), "assigning variable x");
      current_statement__ = 222;
      x_aux = (x_aux + (x_raw[(i - 1)] * Q_r[((i + N) - 1)]));}
    current_statement__ = 225;
    assign(x, cons_list(index_uni(N), nil_index_list()), x_aux,
      "assigning variable x");
    current_statement__ = 226;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sum_to_zero_QR_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
operator()(const T0__& x_raw, const T1__& Q_r, std::ostream* pstream__)  const 
{
return sum_to_zero_QR(x_raw, Q_r, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sum_to_zero_QR_vector(const T0__& x_raw_arg__, const T1__& Q_r_arg__,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x_raw = to_ref(x_raw_arg__);
  const auto& Q_r = to_ref(Q_r_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 228;
    N = (num_elements(x_raw) + 1);
    current_statement__ = 229;
    validate_non_negative_index("x", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> x;
    x = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(x, DUMMY_VAR__);
    
    local_scalar_t__ x_aux;
    x_aux = DUMMY_VAR__;
    
    current_statement__ = 231;
    x_aux = 0;
    current_statement__ = 235;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 232;
      assign(x, cons_list(index_uni(i), nil_index_list()),
        (x_aux + (x_raw[(i - 1)] * Q_r[(i - 1)])), "assigning variable x");
      current_statement__ = 233;
      x_aux = (x_aux + (x_raw[(i - 1)] * Q_r[((i + N) - 1)]));}
    current_statement__ = 236;
    assign(x, cons_list(index_uni(N), nil_index_list()), x_aux,
      "assigning variable x");
    current_statement__ = 237;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sum_to_zero_QR_vector_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& x_raw, const T1__& Q_r, std::ostream* pstream__)  const 
{
return sum_to_zero_QR_vector(x_raw, Q_r, pstream__);
}
};
std::vector<int>
rep_each(const std::vector<int>& x, const int& K, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 239;
    N = size(x);
    current_statement__ = 240;
    validate_non_negative_index("y", "N * K", (N * K));
    std::vector<int> y;
    y = std::vector<int>((N * K), std::numeric_limits<int>::min());
    
    int pos;
    pos = std::numeric_limits<int>::min();
    
    current_statement__ = 242;
    pos = 1;
    current_statement__ = 248;
    for (int n = 1; n <= N; ++n) {
      current_statement__ = 246;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 243;
        assign(y, cons_list(index_uni(pos), nil_index_list()), x[(n - 1)],
          "assigning variable y");
        current_statement__ = 244;
        pos = (pos + 1);}}
    current_statement__ = 249;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rep_each_functor__ {
std::vector<int>
operator()(const std::vector<int>& x, const int& K, std::ostream* pstream__)  const 
{
return rep_each(x, K, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, 1, -1>
average_by_col(const T0__& beta_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& beta = to_ref(beta_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 251;
    return divide(multiply(rep_row_vector(1.0, rows(beta)), beta),
             rows(beta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct average_by_col_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, 1, -1>
operator()(const T0__& beta, std::ostream* pstream__)  const 
{
return average_by_col(beta, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T5__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, T3__,
T5__>
abundance_variability_regression(const T0__& variability_arg__,
                                 const T1__& abundance_arg__,
                                 const std::vector<T2__>& prec_coeff,
                                 const T3__& prec_sd,
                                 const int& bimodal_mean_variability_association,
                                 const T5__& mix_p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T5__>;
  const auto& variability = to_ref(variability_arg__);
  const auto& abundance = to_ref(abundance_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lp;
    lp = DUMMY_VAR__;
    
    current_statement__ = 253;
    lp = 0;
    current_statement__ = 259;
    if (logical_eq(bimodal_mean_variability_association, 1)) {
      current_statement__ = 257;
      for (int m = 1; m <= cols(variability); ++m) {
        current_statement__ = 256;
        lp = (lp +
               log_mix(mix_p,
                 normal_lpdf<false>(variability[(m - 1)],
                   ((abundance[(m - 1)] * prec_coeff[(2 - 1)]) +
                     prec_coeff[(1 - 1)]), prec_sd),
                 normal_lpdf<false>(variability[(m - 1)],
                   ((abundance[(m - 1)] * prec_coeff[(2 - 1)]) + 1), prec_sd)));
      }
    } else {
      current_statement__ = 254;
      lp = normal_lpdf<false>(variability,
             add(multiply(abundance, prec_coeff[(2 - 1)]),
               prec_coeff[(1 - 1)]), prec_sd);
    }
    current_statement__ = 260;
    return lp;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct abundance_variability_regression_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T5__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, T3__,
T5__>
operator()(const T0__& variability, const T1__& abundance,
           const std::vector<T2__>& prec_coeff, const T3__& prec_sd,
           const int& bimodal_mean_variability_association,
           const T5__& mix_p, std::ostream* pstream__)  const 
{
return abundance_variability_regression(variability, abundance, prec_coeff,
         prec_sd, bimodal_mean_variability_association, mix_p, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_glm_multi_beta_binomial final : public model_base_crtp<model_glm_multi_beta_binomial> {
 private:
  int N;
  int M;
  int C;
  int A;
  int A_intercept_columns;
  int Ar;
  std::vector<int> exposure;
  std::vector<std::vector<int>> y;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, -1> XA;
  Eigen::Matrix<double, -1, -1> Xa;
  int is_truncated;
  std::vector<std::vector<int>> truncation_up;
  std::vector<std::vector<int>> truncation_down;
  int TNS;
  std::vector<int> truncation_not_idx;
  int is_vb;
  std::vector<double> prior_prec_intercept;
  std::vector<double> prior_prec_slope;
  std::vector<double> prior_prec_sd;
  int exclude_priors;
  int bimodal_mean_variability_association;
  int use_data;
  int intercept_in_design;
  int N_random_intercepts;
  int N_minus_sum;
  std::vector<std::vector<int>> paring_cov_random_intercept;
  int N_grouping;
  Eigen::Matrix<double, -1, -1> X_random_intercept;
  std::vector<std::vector<int>> idx_group_random_intercepts;
  Eigen::Matrix<double, -1, 1> Q_r;
  double x_raw_sigma;
  Eigen::Matrix<double, -1, -1> Q_ast;
  Eigen::Matrix<double, -1, -1> R_ast;
  Eigen::Matrix<double, -1, -1> R_ast_inverse;
  std::vector<int> y_array;
  std::vector<int> truncation_down_array;
  std::vector<int> exposure_array;
  int beta_raw_raw_2dim__;
  int random_intercept_raw_1dim__;
  int random_intercept_raw_2dim__;
  int random_intercept_sigma_mu_1dim__;
  int random_intercept_sigma_sigma_1dim__;
  int random_intercept_sigma_raw_1dim__;
  int zero_random_intercept_1dim__;
  int random_intercept_minus_sum_2dim__;
  int random_intercept_sigma_1dim__;
  int beta_random_intercept_raw_2dim__;
 
 public:
  ~model_glm_multi_beta_binomial() { }
  
  inline std::string model_name() const final { return "model_glm_multi_beta_binomial"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_glm_multi_beta_binomial(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_glm_multi_beta_binomial_namespace::model_glm_multi_beta_binomial";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 111;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 111;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 111;
      current_statement__ = 111;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 112;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 112;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 112;
      current_statement__ = 112;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 113;
      context__.validate_dims("data initialization","C","int",
          context__.to_vec());
      C = std::numeric_limits<int>::min();
      
      current_statement__ = 113;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 113;
      current_statement__ = 113;
      check_greater_or_equal(function__, "C", C, 1);
      current_statement__ = 114;
      context__.validate_dims("data initialization","A","int",
          context__.to_vec());
      A = std::numeric_limits<int>::min();
      
      current_statement__ = 114;
      A = context__.vals_i("A")[(1 - 1)];
      current_statement__ = 114;
      current_statement__ = 114;
      check_greater_or_equal(function__, "A", A, 1);
      current_statement__ = 115;
      context__.validate_dims("data initialization","A_intercept_columns",
          "int",context__.to_vec());
      A_intercept_columns = std::numeric_limits<int>::min();
      
      current_statement__ = 115;
      A_intercept_columns = context__.vals_i("A_intercept_columns")[(1 - 1)];
      current_statement__ = 115;
      current_statement__ = 115;
      check_greater_or_equal(function__, "A_intercept_columns",
                             A_intercept_columns, 1);
      current_statement__ = 116;
      context__.validate_dims("data initialization","Ar","int",
          context__.to_vec());
      Ar = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      Ar = context__.vals_i("Ar")[(1 - 1)];
      current_statement__ = 116;
      current_statement__ = 116;
      check_greater_or_equal(function__, "Ar", Ar, 1);
      current_statement__ = 117;
      validate_non_negative_index("exposure", "N", N);
      current_statement__ = 118;
      context__.validate_dims("data initialization","exposure","int",
          context__.to_vec(N));
      exposure = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 118;
      assign(exposure, nil_index_list(), context__.vals_i("exposure"),
        "assigning variable exposure");
      current_statement__ = 119;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 120;
      validate_non_negative_index("y", "M", M);
      current_statement__ = 121;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N, M));
      y = std::vector<std::vector<int>>(N, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 121;
        assign(y_flat__, nil_index_list(), context__.vals_i("y"),
          "assigning variable y_flat__");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 121;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 121;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 121;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 122;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 123;
      validate_non_negative_index("X", "C", C);
      current_statement__ = 124;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N, C));
      X = Eigen::Matrix<double, -1, -1>(N, C);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 124;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 124;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 124;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 125;
      validate_non_negative_index("XA", "Ar", Ar);
      current_statement__ = 126;
      validate_non_negative_index("XA", "A", A);
      current_statement__ = 127;
      context__.validate_dims("data initialization","XA","double",
          context__.to_vec(Ar, A));
      XA = Eigen::Matrix<double, -1, -1>(Ar, A);
      stan::math::fill(XA, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> XA_flat__;
        current_statement__ = 127;
        assign(XA_flat__, nil_index_list(), context__.vals_r("XA"),
          "assigning variable XA_flat__");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
          current_statement__ = 127;
          for (int sym2__ = 1; sym2__ <= Ar; ++sym2__) {
            current_statement__ = 127;
            assign(XA,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              XA_flat__[(pos__ - 1)], "assigning variable XA");
            current_statement__ = 127;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 128;
      validate_non_negative_index("Xa", "N", N);
      current_statement__ = 129;
      validate_non_negative_index("Xa", "A", A);
      current_statement__ = 130;
      context__.validate_dims("data initialization","Xa","double",
          context__.to_vec(N, A));
      Xa = Eigen::Matrix<double, -1, -1>(N, A);
      stan::math::fill(Xa, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xa_flat__;
        current_statement__ = 130;
        assign(Xa_flat__, nil_index_list(), context__.vals_r("Xa"),
          "assigning variable Xa_flat__");
        current_statement__ = 130;
        pos__ = 1;
        current_statement__ = 130;
        for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
          current_statement__ = 130;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 130;
            assign(Xa,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xa_flat__[(pos__ - 1)], "assigning variable Xa");
            current_statement__ = 130;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 131;
      context__.validate_dims("data initialization","is_truncated","int",
          context__.to_vec());
      is_truncated = std::numeric_limits<int>::min();
      
      current_statement__ = 131;
      is_truncated = context__.vals_i("is_truncated")[(1 - 1)];
      current_statement__ = 132;
      validate_non_negative_index("truncation_up", "N", N);
      current_statement__ = 133;
      validate_non_negative_index("truncation_up", "M", M);
      current_statement__ = 134;
      context__.validate_dims("data initialization","truncation_up","int",
          context__.to_vec(N, M));
      truncation_up = std::vector<std::vector<int>>(N, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> truncation_up_flat__;
        current_statement__ = 134;
        assign(truncation_up_flat__, nil_index_list(),
          context__.vals_i("truncation_up"),
          "assigning variable truncation_up_flat__");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 134;
            assign(truncation_up,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              truncation_up_flat__[(pos__ - 1)],
              "assigning variable truncation_up");
            current_statement__ = 134;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 135;
      validate_non_negative_index("truncation_down", "N", N);
      current_statement__ = 136;
      validate_non_negative_index("truncation_down", "M", M);
      current_statement__ = 137;
      context__.validate_dims("data initialization","truncation_down","int",
          context__.to_vec(N, M));
      truncation_down = std::vector<std::vector<int>>(N, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> truncation_down_flat__;
        current_statement__ = 137;
        assign(truncation_down_flat__, nil_index_list(),
          context__.vals_i("truncation_down"),
          "assigning variable truncation_down_flat__");
        current_statement__ = 137;
        pos__ = 1;
        current_statement__ = 137;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 137;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 137;
            assign(truncation_down,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              truncation_down_flat__[(pos__ - 1)],
              "assigning variable truncation_down");
            current_statement__ = 137;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 138;
      context__.validate_dims("data initialization","TNS","int",
          context__.to_vec());
      TNS = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      TNS = context__.vals_i("TNS")[(1 - 1)];
      current_statement__ = 138;
      current_statement__ = 138;
      check_greater_or_equal(function__, "TNS", TNS, 1);
      current_statement__ = 138;
      current_statement__ = 138;
      check_less_or_equal(function__, "TNS", TNS, (N * M));
      current_statement__ = 139;
      validate_non_negative_index("truncation_not_idx", "TNS", TNS);
      current_statement__ = 140;
      context__.validate_dims("data initialization","truncation_not_idx",
          "int",context__.to_vec(TNS));
      truncation_not_idx = std::vector<int>(TNS, std::numeric_limits<int>::min());
      
      current_statement__ = 140;
      assign(truncation_not_idx, nil_index_list(),
        context__.vals_i("truncation_not_idx"),
        "assigning variable truncation_not_idx");
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= TNS; ++sym1__) {
        current_statement__ = 140;
        current_statement__ = 140;
        check_greater_or_equal(function__, "truncation_not_idx[sym1__]",
                               truncation_not_idx[(sym1__ - 1)], 1);}
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= TNS; ++sym1__) {
        current_statement__ = 140;
        current_statement__ = 140;
        check_less_or_equal(function__, "truncation_not_idx[sym1__]",
                            truncation_not_idx[(sym1__ - 1)], (N * M));}
      current_statement__ = 141;
      context__.validate_dims("data initialization","is_vb","int",
          context__.to_vec());
      is_vb = std::numeric_limits<int>::min();
      
      current_statement__ = 141;
      is_vb = context__.vals_i("is_vb")[(1 - 1)];
      current_statement__ = 141;
      current_statement__ = 141;
      check_greater_or_equal(function__, "is_vb", is_vb, 0);
      current_statement__ = 141;
      current_statement__ = 141;
      check_less_or_equal(function__, "is_vb", is_vb, 1);
      current_statement__ = 142;
      context__.validate_dims("data initialization","prior_prec_intercept",
          "double",context__.to_vec(2));
      prior_prec_intercept = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 142;
      assign(prior_prec_intercept, nil_index_list(),
        context__.vals_r("prior_prec_intercept"),
        "assigning variable prior_prec_intercept");
      current_statement__ = 143;
      context__.validate_dims("data initialization","prior_prec_slope",
          "double",context__.to_vec(2));
      prior_prec_slope = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 143;
      assign(prior_prec_slope, nil_index_list(),
        context__.vals_r("prior_prec_slope"),
        "assigning variable prior_prec_slope");
      current_statement__ = 144;
      context__.validate_dims("data initialization","prior_prec_sd","double",
          context__.to_vec(2));
      prior_prec_sd = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 144;
      assign(prior_prec_sd, nil_index_list(),
        context__.vals_r("prior_prec_sd"), "assigning variable prior_prec_sd");
      current_statement__ = 145;
      context__.validate_dims("data initialization","exclude_priors","int",
          context__.to_vec());
      exclude_priors = std::numeric_limits<int>::min();
      
      current_statement__ = 145;
      exclude_priors = context__.vals_i("exclude_priors")[(1 - 1)];
      current_statement__ = 145;
      current_statement__ = 145;
      check_greater_or_equal(function__, "exclude_priors", exclude_priors, 0);
      current_statement__ = 145;
      current_statement__ = 145;
      check_less_or_equal(function__, "exclude_priors", exclude_priors, 1);
      current_statement__ = 146;
      context__.validate_dims("data initialization",
          "bimodal_mean_variability_association","int",context__.to_vec());
      bimodal_mean_variability_association = std::numeric_limits<int>::min();
      
      current_statement__ = 146;
      bimodal_mean_variability_association = context__.vals_i("bimodal_mean_variability_association")[
          (1 - 1)];
      current_statement__ = 146;
      current_statement__ = 146;
      check_greater_or_equal(function__,
                             "bimodal_mean_variability_association",
                             bimodal_mean_variability_association, 0);
      current_statement__ = 146;
      current_statement__ = 146;
      check_less_or_equal(function__, "bimodal_mean_variability_association",
                          bimodal_mean_variability_association, 1);
      current_statement__ = 147;
      context__.validate_dims("data initialization","use_data","int",
          context__.to_vec());
      use_data = std::numeric_limits<int>::min();
      
      current_statement__ = 147;
      use_data = context__.vals_i("use_data")[(1 - 1)];
      current_statement__ = 147;
      current_statement__ = 147;
      check_greater_or_equal(function__, "use_data", use_data, 0);
      current_statement__ = 147;
      current_statement__ = 147;
      check_less_or_equal(function__, "use_data", use_data, 1);
      current_statement__ = 148;
      context__.validate_dims("data initialization","intercept_in_design",
          "int",context__.to_vec());
      intercept_in_design = std::numeric_limits<int>::min();
      
      current_statement__ = 148;
      intercept_in_design = context__.vals_i("intercept_in_design")[(1 - 1)];
      current_statement__ = 148;
      current_statement__ = 148;
      check_greater_or_equal(function__, "intercept_in_design",
                             intercept_in_design, 0);
      current_statement__ = 148;
      current_statement__ = 148;
      check_less_or_equal(function__, "intercept_in_design",
                          intercept_in_design, 1);
      current_statement__ = 149;
      context__.validate_dims("data initialization","N_random_intercepts",
          "int",context__.to_vec());
      N_random_intercepts = std::numeric_limits<int>::min();
      
      current_statement__ = 149;
      N_random_intercepts = context__.vals_i("N_random_intercepts")[(1 - 1)];
      current_statement__ = 150;
      context__.validate_dims("data initialization","N_minus_sum","int",
          context__.to_vec());
      N_minus_sum = std::numeric_limits<int>::min();
      
      current_statement__ = 150;
      N_minus_sum = context__.vals_i("N_minus_sum")[(1 - 1)];
      current_statement__ = 151;
      validate_non_negative_index("paring_cov_random_intercept",
                                  "N_random_intercepts", N_random_intercepts);
      current_statement__ = 152;
      context__.validate_dims("data initialization",
          "paring_cov_random_intercept","int",
          context__.to_vec(N_random_intercepts, 2));
      paring_cov_random_intercept = std::vector<std::vector<int>>(N_random_intercepts, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> paring_cov_random_intercept_flat__;
        current_statement__ = 152;
        assign(paring_cov_random_intercept_flat__, nil_index_list(),
          context__.vals_i("paring_cov_random_intercept"),
          "assigning variable paring_cov_random_intercept_flat__");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= N_random_intercepts; ++sym2__) {
            current_statement__ = 152;
            assign(paring_cov_random_intercept,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              paring_cov_random_intercept_flat__[(pos__ - 1)],
              "assigning variable paring_cov_random_intercept");
            current_statement__ = 152;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 153;
      context__.validate_dims("data initialization","N_grouping","int",
          context__.to_vec());
      N_grouping = std::numeric_limits<int>::min();
      
      current_statement__ = 153;
      N_grouping = context__.vals_i("N_grouping")[(1 - 1)];
      current_statement__ = 154;
      validate_non_negative_index("X_random_intercept", "N", N);
      current_statement__ = 155;
      validate_non_negative_index("X_random_intercept", "N_grouping",
                                  N_grouping);
      current_statement__ = 156;
      context__.validate_dims("data initialization","X_random_intercept",
          "double",context__.to_vec(N, N_grouping));
      X_random_intercept = Eigen::Matrix<double, -1, -1>(N, N_grouping);
      stan::math::fill(X_random_intercept, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_random_intercept_flat__;
        current_statement__ = 156;
        assign(X_random_intercept_flat__, nil_index_list(),
          context__.vals_r("X_random_intercept"),
          "assigning variable X_random_intercept_flat__");
        current_statement__ = 156;
        pos__ = 1;
        current_statement__ = 156;
        for (int sym1__ = 1; sym1__ <= N_grouping; ++sym1__) {
          current_statement__ = 156;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 156;
            assign(X_random_intercept,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_random_intercept_flat__[(pos__ - 1)],
              "assigning variable X_random_intercept");
            current_statement__ = 156;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 157;
      validate_non_negative_index("idx_group_random_intercepts",
                                  "N_grouping", N_grouping);
      current_statement__ = 158;
      context__.validate_dims("data initialization",
          "idx_group_random_intercepts","int",
          context__.to_vec(N_grouping, 2));
      idx_group_random_intercepts = std::vector<std::vector<int>>(N_grouping, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> idx_group_random_intercepts_flat__;
        current_statement__ = 158;
        assign(idx_group_random_intercepts_flat__, nil_index_list(),
          context__.vals_i("idx_group_random_intercepts"),
          "assigning variable idx_group_random_intercepts_flat__");
        current_statement__ = 158;
        pos__ = 1;
        current_statement__ = 158;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 158;
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            current_statement__ = 158;
            assign(idx_group_random_intercepts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              idx_group_random_intercepts_flat__[(pos__ - 1)],
              "assigning variable idx_group_random_intercepts");
            current_statement__ = 158;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 159;
      validate_non_negative_index("Q_r", "2 * M", (2 * M));
      current_statement__ = 160;
      Q_r = Eigen::Matrix<double, -1, 1>((2 * M));
      stan::math::fill(Q_r, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 160;
      assign(Q_r, nil_index_list(), Q_sum_to_zero_QR(M, pstream__),
        "assigning variable Q_r");
      current_statement__ = 161;
      x_raw_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 161;
      x_raw_sigma = inv_sqrt((1 - inv(M)));
      current_statement__ = 162;
      validate_non_negative_index("Q_ast", "N", N);
      current_statement__ = 163;
      validate_non_negative_index("Q_ast", "C", C);
      current_statement__ = 164;
      Q_ast = Eigen::Matrix<double, -1, -1>(N, C);
      stan::math::fill(Q_ast, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 165;
      validate_non_negative_index("R_ast", "C", C);
      current_statement__ = 166;
      validate_non_negative_index("R_ast", "C", C);
      current_statement__ = 167;
      R_ast = Eigen::Matrix<double, -1, -1>(C, C);
      stan::math::fill(R_ast, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 168;
      validate_non_negative_index("R_ast_inverse", "C", C);
      current_statement__ = 169;
      validate_non_negative_index("R_ast_inverse", "C", C);
      current_statement__ = 170;
      R_ast_inverse = Eigen::Matrix<double, -1, -1>(C, C);
      stan::math::fill(R_ast_inverse, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 171;
      validate_non_negative_index("y_array", "N * M", (N * M));
      current_statement__ = 172;
      y_array = std::vector<int>((N * M), std::numeric_limits<int>::min());
      
      current_statement__ = 173;
      validate_non_negative_index("truncation_down_array", "N * M", (N * M));
      current_statement__ = 174;
      truncation_down_array = std::vector<int>((N * M), std::numeric_limits<int>::min());
      
      current_statement__ = 175;
      validate_non_negative_index("exposure_array", "N * M", (N * M));
      current_statement__ = 176;
      exposure_array = std::vector<int>((N * M), std::numeric_limits<int>::min());
      
      current_statement__ = 177;
      assign(Q_ast, nil_index_list(),
        multiply(qr_thin_Q(X), stan::math::sqrt((N - 1))),
        "assigning variable Q_ast");
      current_statement__ = 178;
      assign(R_ast_inverse, nil_index_list(),
        inverse(divide(qr_thin_R(X), stan::math::sqrt((N - 1)))),
        "assigning variable R_ast_inverse");
      current_statement__ = 179;
      assign(Q_ast, nil_index_list(), X, "assigning variable Q_ast");
      current_statement__ = 180;
      assign(R_ast_inverse, nil_index_list(),
        diag_matrix(rep_vector(1.0, C)), "assigning variable R_ast_inverse");
      current_statement__ = 181;
      assign(y_array, nil_index_list(), to_array_1d(y),
        "assigning variable y_array");
      current_statement__ = 182;
      assign(truncation_down_array, nil_index_list(),
        to_array_1d(truncation_down),
        "assigning variable truncation_down_array");
      current_statement__ = 183;
      assign(exposure_array, nil_index_list(),
        rep_each(exposure, M, pstream__), "assigning variable exposure_array");
      current_statement__ = 184;
      validate_non_negative_index("beta_raw_raw", "C", C);
      current_statement__ = 185;
      beta_raw_raw_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 185;
      beta_raw_raw_2dim__ = (M - 1);
      current_statement__ = 185;
      validate_non_negative_index("beta_raw_raw", "M - 1",
                                  beta_raw_raw_2dim__);
      current_statement__ = 186;
      validate_non_negative_index("alpha", "A", A);
      current_statement__ = 187;
      validate_non_negative_index("alpha", "M", M);
      current_statement__ = 188;
      random_intercept_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 188;
      random_intercept_raw_1dim__ = (N_random_intercepts *
                                      logical_gt(N_random_intercepts, 0));
      current_statement__ = 188;
      validate_non_negative_index("random_intercept_raw",
                                  "N_random_intercepts * (N_random_intercepts > 0)",
                                  random_intercept_raw_1dim__);
      current_statement__ = 189;
      random_intercept_raw_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 189;
      random_intercept_raw_2dim__ = (M - 1);
      current_statement__ = 189;
      validate_non_negative_index("random_intercept_raw", "M - 1",
                                  random_intercept_raw_2dim__);
      current_statement__ = 190;
      random_intercept_sigma_mu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      random_intercept_sigma_mu_1dim__ = logical_gt(N_random_intercepts, 0);
      current_statement__ = 190;
      validate_non_negative_index("random_intercept_sigma_mu",
                                  "N_random_intercepts > 0",
                                  random_intercept_sigma_mu_1dim__);
      current_statement__ = 191;
      random_intercept_sigma_sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      random_intercept_sigma_sigma_1dim__ = logical_gt(N_random_intercepts,
                                              0);
      current_statement__ = 191;
      validate_non_negative_index("random_intercept_sigma_sigma",
                                  "N_random_intercepts > 0",
                                  random_intercept_sigma_sigma_1dim__);
      current_statement__ = 192;
      random_intercept_sigma_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      random_intercept_sigma_raw_1dim__ = ((M - 1) *
                                            logical_gt(N_random_intercepts,
                                              0));
      current_statement__ = 192;
      validate_non_negative_index("random_intercept_sigma_raw",
                                  "(M - 1) * (N_random_intercepts > 0)",
                                  random_intercept_sigma_raw_1dim__);
      current_statement__ = 193;
      zero_random_intercept_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 193;
      zero_random_intercept_1dim__ = logical_gt(N_random_intercepts, 0);
      current_statement__ = 193;
      validate_non_negative_index("zero_random_intercept",
                                  "N_random_intercepts > 0",
                                  zero_random_intercept_1dim__);
      current_statement__ = 194;
      validate_non_negative_index("beta_raw", "C", C);
      current_statement__ = 195;
      validate_non_negative_index("beta_raw", "M", M);
      current_statement__ = 196;
      validate_non_negative_index("precision", "M", M);
      current_statement__ = 197;
      validate_non_negative_index("precision", "N", N);
      current_statement__ = 198;
      validate_non_negative_index("beta", "C", C);
      current_statement__ = 199;
      validate_non_negative_index("beta", "M", M);
      current_statement__ = 200;
      validate_non_negative_index("random_intercept_minus_sum",
                                  "N_minus_sum", N_minus_sum);
      current_statement__ = 201;
      random_intercept_minus_sum_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 201;
      random_intercept_minus_sum_2dim__ = (M - 1);
      current_statement__ = 201;
      validate_non_negative_index("random_intercept_minus_sum", "M - 1",
                                  random_intercept_minus_sum_2dim__);
      current_statement__ = 202;
      random_intercept_sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 202;
      random_intercept_sigma_1dim__ = (M - 1);
      current_statement__ = 202;
      validate_non_negative_index("random_intercept_sigma", "M - 1",
                                  random_intercept_sigma_1dim__);
      current_statement__ = 203;
      validate_non_negative_index("beta_random_intercept_raw", "N_grouping",
                                  N_grouping);
      current_statement__ = 204;
      beta_random_intercept_raw_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 204;
      beta_random_intercept_raw_2dim__ = (M - 1);
      current_statement__ = 204;
      validate_non_negative_index("beta_random_intercept_raw", "M - 1",
                                  beta_random_intercept_raw_2dim__);
      current_statement__ = 205;
      validate_non_negative_index("alpha_normalised", "A", A);
      current_statement__ = 206;
      validate_non_negative_index("alpha_normalised", "M", M);
      current_statement__ = 207;
      validate_non_negative_index("beta_random_intercept", "N_grouping",
                                  N_grouping);
      current_statement__ = 208;
      validate_non_negative_index("beta_random_intercept", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += C * beta_raw_raw_2dim__;
      num_params_r__ += A * M;
      num_params_r__ += 2;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += random_intercept_raw_1dim__ * random_intercept_raw_2dim__;
      num_params_r__ += random_intercept_sigma_mu_1dim__;
      num_params_r__ += random_intercept_sigma_sigma_1dim__;
      num_params_r__ += random_intercept_sigma_raw_1dim__;
      num_params_r__ += zero_random_intercept_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_glm_multi_beta_binomial_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_raw_raw;
      beta_raw_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(C, beta_raw_raw_2dim__);
      stan::math::fill(beta_raw_raw, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta_raw_raw = in__.matrix(C, beta_raw_raw_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, -1>(A, M);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      alpha = in__.matrix(A, M);
      std::vector<local_scalar_t__> prec_coeff;
      prec_coeff = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(prec_coeff, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable prec_coeff");}
      local_scalar_t__ prec_sd;
      prec_sd = DUMMY_VAR__;
      
      current_statement__ = 4;
      prec_sd = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        prec_sd = stan::math::lb_constrain(prec_sd, 0, lp__);
      } else {
        current_statement__ = 4;
        prec_sd = stan::math::lb_constrain(prec_sd, 0);
      }
      local_scalar_t__ mix_p;
      mix_p = DUMMY_VAR__;
      
      current_statement__ = 5;
      mix_p = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        mix_p = stan::math::lub_constrain(mix_p, 0, 1, lp__);
      } else {
        current_statement__ = 5;
        mix_p = stan::math::lub_constrain(mix_p, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> random_intercept_raw;
      random_intercept_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(random_intercept_raw_1dim__, random_intercept_raw_2dim__);
      stan::math::fill(random_intercept_raw, DUMMY_VAR__);
      
      current_statement__ = 6;
      random_intercept_raw = in__.matrix(random_intercept_raw_1dim__,
                               random_intercept_raw_2dim__);
      std::vector<local_scalar_t__> random_intercept_sigma_mu;
      random_intercept_sigma_mu = std::vector<local_scalar_t__>(random_intercept_sigma_mu_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__;
           ++sym1__) {
        current_statement__ = 7;
        assign(random_intercept_sigma_mu,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable random_intercept_sigma_mu");}
      std::vector<local_scalar_t__> random_intercept_sigma_sigma;
      random_intercept_sigma_sigma = std::vector<local_scalar_t__>(random_intercept_sigma_sigma_1dim__, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
           ++sym1__) {
        current_statement__ = 8;
        assign(random_intercept_sigma_sigma,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable random_intercept_sigma_sigma");}
      Eigen::Matrix<local_scalar_t__, 1, -1> random_intercept_sigma_raw;
      random_intercept_sigma_raw = Eigen::Matrix<local_scalar_t__, 1, -1>(random_intercept_sigma_raw_1dim__);
      stan::math::fill(random_intercept_sigma_raw, DUMMY_VAR__);
      
      current_statement__ = 9;
      random_intercept_sigma_raw = in__.row_vector(
                                     random_intercept_sigma_raw_1dim__);
      std::vector<local_scalar_t__> zero_random_intercept;
      zero_random_intercept = std::vector<local_scalar_t__>(zero_random_intercept_1dim__, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(zero_random_intercept,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable zero_random_intercept");}
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_raw;
      beta_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(C, M);
      stan::math::fill(beta_raw, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> precision;
      precision = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
      stan::math::fill(precision, DUMMY_VAR__);
      
      current_statement__ = 12;
      assign(precision, nil_index_list(), transpose(multiply(Xa, alpha)),
        "assigning variable precision");
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(C, M);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> random_intercept_minus_sum;
      random_intercept_minus_sum = Eigen::Matrix<local_scalar_t__, -1, -1>(N_minus_sum, random_intercept_minus_sum_2dim__);
      stan::math::fill(random_intercept_minus_sum, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> random_intercept_sigma;
      random_intercept_sigma = Eigen::Matrix<local_scalar_t__, 1, -1>(random_intercept_sigma_1dim__);
      stan::math::fill(random_intercept_sigma, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_random_intercept_raw;
      beta_random_intercept_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(N_grouping, beta_random_intercept_raw_2dim__);
      stan::math::fill(beta_random_intercept_raw, DUMMY_VAR__);
      
      current_statement__ = 18;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 17;
        assign(beta_raw,
          cons_list(index_uni(c), cons_list(index_omni(), nil_index_list())),
          sum_to_zero_QR(
            rvalue(beta_raw_raw,
              cons_list(index_uni(c),
                cons_list(index_omni(), nil_index_list())), "beta_raw_raw"),
            Q_r, pstream__), "assigning variable beta_raw");}
      current_statement__ = 19;
      assign(beta, nil_index_list(), beta_raw, "assigning variable beta");
      current_statement__ = 38;
      if (logical_gt(N_random_intercepts, 0)) {
        current_statement__ = 20;
        assign(random_intercept_sigma, nil_index_list(),
          add(random_intercept_sigma_mu[(1 - 1)],
            multiply(random_intercept_sigma_sigma[(1 - 1)],
              random_intercept_sigma_raw)),
          "assigning variable random_intercept_sigma");
        current_statement__ = 29;
        for (int a = 1; a <= N_minus_sum; ++a) {
          current_statement__ = 21;
          validate_non_negative_index("temp_random_intercept", "M - 1",
                                      (M - 1));
          Eigen::Matrix<local_scalar_t__, 1, -1> temp_random_intercept;
          temp_random_intercept = Eigen::Matrix<local_scalar_t__, 1, -1>(
            (M - 1));
          stan::math::fill(temp_random_intercept, DUMMY_VAR__);
          
          current_statement__ = 22;
          assign(temp_random_intercept, nil_index_list(),
            rep_row_vector(0, (M - 1)),
            "assigning variable temp_random_intercept");
          current_statement__ = 26;
          for (int n = 1; n <= N_random_intercepts; ++n) {
            current_statement__ = 24;
            if (logical_eq(paring_cov_random_intercept[(n - 1)][(1 - 1)], a)) {
              current_statement__ = 23;
              assign(temp_random_intercept, nil_index_list(),
                add(stan::model::deep_copy(temp_random_intercept),
                  rvalue(random_intercept_raw,
                    cons_list(index_uni(n), nil_index_list()),
                    "random_intercept_raw")),
                "assigning variable temp_random_intercept");
            } }
          current_statement__ = 27;
          assign(random_intercept_minus_sum,
            cons_list(index_uni(a), nil_index_list()),
            multiply(temp_random_intercept, -1),
            "assigning variable random_intercept_minus_sum");}
        current_statement__ = 36;
        for (int n = 1; n <= N_grouping; ++n) {
          current_statement__ = 34;
          if (logical_gt(idx_group_random_intercepts[(n - 1)][(2 - 1)], 0)) {
            current_statement__ = 33;
            assign(beta_random_intercept_raw,
              cons_list(
                index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                nil_index_list()),
              elt_multiply(
                rvalue(random_intercept_raw,
                  cons_list(
                    index_uni(idx_group_random_intercepts[(n - 1)][(2 - 1)]),
                    nil_index_list()), "random_intercept_raw"),
                stan::math::exp(divide(random_intercept_sigma, 3.0))),
              "assigning variable beta_random_intercept_raw");
          } else {
            current_statement__ = 32;
            if (logical_lt(idx_group_random_intercepts[(n - 1)][(2 - 1)], 0)) {
              current_statement__ = 31;
              assign(beta_random_intercept_raw,
                cons_list(
                  index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                  nil_index_list()),
                elt_multiply(
                  rvalue(random_intercept_minus_sum,
                    cons_list(
                      index_uni(-idx_group_random_intercepts[(n - 1)][
                                  (2 - 1)]), nil_index_list()),
                    "random_intercept_minus_sum"),
                  stan::math::exp(divide(random_intercept_sigma, 3.0))),
                "assigning variable beta_random_intercept_raw");
            } else {
              current_statement__ = 30;
              assign(beta_random_intercept_raw,
                cons_list(
                  index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                  nil_index_list()),
                rep_row_vector(
                  (zero_random_intercept[(logical_gt(N_random_intercepts, 0)
                                           - 1)] *
                    stan::math::exp(
                      (random_intercept_sigma_mu[(1 - 1)] / 3.0))), (M - 1)),
                "assigning variable beta_random_intercept_raw");
            }
          }}
      } 
      {
        current_statement__ = 73;
        if (logical_eq(use_data, 1)) {
          current_statement__ = 52;
          validate_non_negative_index("mu", "M", M);
          current_statement__ = 53;
          validate_non_negative_index("mu", "N", N);
          Eigen::Matrix<local_scalar_t__, -1, -1> mu;
          mu = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
          stan::math::fill(mu, DUMMY_VAR__);
          
          current_statement__ = 55;
          validate_non_negative_index("mu_array", "N * M", (N * M));
          Eigen::Matrix<local_scalar_t__, -1, 1> mu_array;
          mu_array = Eigen::Matrix<local_scalar_t__, -1, 1>((N * M));
          stan::math::fill(mu_array, DUMMY_VAR__);
          
          current_statement__ = 57;
          validate_non_negative_index("precision_array", "N * M", (N * M));
          Eigen::Matrix<local_scalar_t__, -1, 1> precision_array;
          precision_array = Eigen::Matrix<local_scalar_t__, -1, 1>((N * M));
          stan::math::fill(precision_array, DUMMY_VAR__);
          
          current_statement__ = 59;
          validate_non_negative_index("mu_random_intercept", "M", M);
          current_statement__ = 60;
          validate_non_negative_index("mu_random_intercept", "N", N);
          Eigen::Matrix<local_scalar_t__, -1, -1> mu_random_intercept;
          mu_random_intercept = Eigen::Matrix<local_scalar_t__, -1, -1>(M, N);
          stan::math::fill(mu_random_intercept, DUMMY_VAR__);
          
          current_statement__ = 66;
          if (logical_gt(N_random_intercepts, 0)) {
            current_statement__ = 63;
            assign(mu_random_intercept, nil_index_list(),
              append_row(
                transpose(
                  multiply(X_random_intercept, beta_random_intercept_raw)),
                rep_row_vector(0, N)),
              "assigning variable mu_random_intercept");
            current_statement__ = 64;
            assign(mu, nil_index_list(),
              add(transpose(multiply(Q_ast, beta_raw)), mu_random_intercept),
              "assigning variable mu");
          } else {
            current_statement__ = 62;
            assign(mu, nil_index_list(),
              transpose(multiply(Q_ast, beta_raw)), "assigning variable mu");
          }
          current_statement__ = 68;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 67;
            assign(mu,
              cons_list(index_omni(),
                cons_list(index_uni(n), nil_index_list())),
              softmax(
                stan::model::deep_copy(
                  rvalue(mu,
                    cons_list(index_omni(),
                      cons_list(index_uni(n), nil_index_list())), "mu"))),
              "assigning variable mu");}
          current_statement__ = 69;
          assign(mu_array, nil_index_list(), to_vector(mu),
            "assigning variable mu_array");
          current_statement__ = 70;
          assign(precision_array, nil_index_list(),
            to_vector(stan::math::exp(precision)),
            "assigning variable precision_array");
          current_statement__ = 71;
          lp_accum__.add(
            beta_binomial_lpmf<false>(
              rvalue(y_array,
                cons_list(index_multi(truncation_not_idx), nil_index_list()),
                "y_array"),
              rvalue(exposure_array,
                cons_list(index_multi(truncation_not_idx), nil_index_list()),
                "exposure_array"),
              elt_multiply(
                rvalue(mu_array,
                  cons_list(index_multi(truncation_not_idx),
                    nil_index_list()), "mu_array"),
                rvalue(precision_array,
                  cons_list(index_multi(truncation_not_idx),
                    nil_index_list()), "precision_array")),
              elt_multiply(
                subtract(1.0,
                  rvalue(mu_array,
                    cons_list(index_multi(truncation_not_idx),
                      nil_index_list()), "mu_array")),
                rvalue(precision_array,
                  cons_list(index_multi(truncation_not_idx),
                    nil_index_list()), "precision_array"))));
        } 
        current_statement__ = 94;
        if (logical_eq(exclude_priors, 0)) {
          current_statement__ = 92;
          if ((primitive_value(intercept_in_design) || primitive_value(
              logical_gt(A, 1)))) {
            current_statement__ = 87;
            for (int a = 1; a <= A_intercept_columns; ++a) {
              current_statement__ = 86;
              lp_accum__.add(
                abundance_variability_regression(
                  rvalue(alpha, cons_list(index_uni(a), nil_index_list()),
                    "alpha"),
                  rvalue(beta, cons_list(index_uni(a), nil_index_list()),
                    "beta"), prec_coeff, prec_sd,
                  bimodal_mean_variability_association, mix_p, pstream__));}
            current_statement__ = 90;
            if (logical_gt(A, A_intercept_columns)) {
              current_statement__ = 89;
              for (int a = (A_intercept_columns + 1); a <= A; ++a) {
                current_statement__ = 88;
                lp_accum__.add(
                  normal_lpdf<propto__>(
                    rvalue(alpha, cons_list(index_uni(a), nil_index_list()),
                      "alpha"),
                    multiply(
                      rvalue(beta, cons_list(index_uni(a), nil_index_list()),
                        "beta"), prec_coeff[(2 - 1)]), 2));}
            } 
          } else {
            current_statement__ = 84;
            lp_accum__.add(
              abundance_variability_regression(
                rvalue(alpha, cons_list(index_uni(1), nil_index_list()),
                  "alpha"),
                average_by_col(
                  rvalue(beta,
                    cons_list(index_min_max(1, A_intercept_columns),
                      cons_list(index_omni(), nil_index_list())), "beta"), pstream__),
                prec_coeff, prec_sd, bimodal_mean_variability_association,
                mix_p, pstream__));
          }
        } else {
          current_statement__ = 82;
          if ((primitive_value(intercept_in_design) || primitive_value(
              logical_gt(A, 1)))) {
            current_statement__ = 77;
            for (int a = 1; a <= A_intercept_columns; ++a) {
              current_statement__ = 76;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(alpha, cons_list(index_uni(a), nil_index_list()),
                    "alpha"), prior_prec_slope[(1 - 1)],
                  prior_prec_sd[(1 - 1)]));}
            current_statement__ = 80;
            if (logical_gt(A, A_intercept_columns)) {
              current_statement__ = 79;
              for (int a = (A_intercept_columns + 1); a <= A; ++a) {
                current_statement__ = 78;
                lp_accum__.add(
                  normal_lpdf<propto__>(
                    to_vector(
                      rvalue(alpha,
                        cons_list(index_uni(a), nil_index_list()), "alpha")),
                    0, 2));}
            } 
          } else {
            current_statement__ = 74;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(alpha, cons_list(index_uni(1), nil_index_list()),
                  "alpha"), prior_prec_slope[(1 - 1)],
                prior_prec_sd[(1 - 1)]));
          }
        }
        current_statement__ = 95;
        lp_accum__.add(
          normal_lpdf<propto__>(
            rvalue(beta_raw_raw, cons_list(index_uni(1), nil_index_list()),
              "beta_raw_raw"), 0, x_raw_sigma));
        current_statement__ = 98;
        if (logical_gt(C, 1)) {
          current_statement__ = 97;
          for (int c = 2; c <= C; ++c) {
            current_statement__ = 96;
            lp_accum__.add(
              normal_lpdf<propto__>(
                to_vector(
                  rvalue(beta_raw_raw,
                    cons_list(index_uni(c), nil_index_list()),
                    "beta_raw_raw")), 0, x_raw_sigma));}
        } 
        current_statement__ = 99;
        lp_accum__.add(beta_lpdf<propto__>(mix_p, 1, 5));
        current_statement__ = 100;
        lp_accum__.add(
          normal_lpdf<propto__>(prec_coeff[(1 - 1)],
            prior_prec_intercept[(1 - 1)], prior_prec_intercept[(2 - 1)]));
        current_statement__ = 101;
        lp_accum__.add(
          normal_lpdf<propto__>(prec_coeff[(2 - 1)],
            prior_prec_slope[(1 - 1)], prior_prec_slope[(2 - 1)]));
        current_statement__ = 102;
        lp_accum__.add(
          gamma_lpdf<propto__>(prec_sd, prior_prec_sd[(1 - 1)],
            prior_prec_sd[(2 - 1)]));
        current_statement__ = 110;
        if (logical_gt(N_random_intercepts, 0)) {
          current_statement__ = 104;
          for (int m = 1; m <= (M - 1); ++m) {
            current_statement__ = 103;
            lp_accum__.add(
              std_normal_lpdf<propto__>(
                rvalue(random_intercept_raw,
                  cons_list(index_omni(),
                    cons_list(index_uni(m), nil_index_list())),
                  "random_intercept_raw")));}
          current_statement__ = 105;
          lp_accum__.add(
            std_normal_lpdf<propto__>(random_intercept_sigma_raw));
          current_statement__ = 106;
          lp_accum__.add(std_normal_lpdf<propto__>(random_intercept_sigma_mu));
          current_statement__ = 107;
          lp_accum__.add(
            std_normal_lpdf<propto__>(random_intercept_sigma_sigma));
          current_statement__ = 108;
          lp_accum__.add(std_normal_lpdf<propto__>(zero_random_intercept));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_glm_multi_beta_binomial_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> beta_raw_raw;
      beta_raw_raw = Eigen::Matrix<double, -1, -1>(C, beta_raw_raw_2dim__);
      stan::math::fill(beta_raw_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta_raw_raw = in__.matrix(C, beta_raw_raw_2dim__);
      Eigen::Matrix<double, -1, -1> alpha;
      alpha = Eigen::Matrix<double, -1, -1>(A, M);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alpha = in__.matrix(A, M);
      std::vector<double> prec_coeff;
      prec_coeff = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(prec_coeff, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable prec_coeff");}
      double prec_sd;
      prec_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prec_sd = in__.scalar();
      current_statement__ = 4;
      prec_sd = stan::math::lb_constrain(prec_sd, 0);
      double mix_p;
      mix_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mix_p = in__.scalar();
      current_statement__ = 5;
      mix_p = stan::math::lub_constrain(mix_p, 0, 1);
      Eigen::Matrix<double, -1, -1> random_intercept_raw;
      random_intercept_raw = Eigen::Matrix<double, -1, -1>(random_intercept_raw_1dim__, random_intercept_raw_2dim__);
      stan::math::fill(random_intercept_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      random_intercept_raw = in__.matrix(random_intercept_raw_1dim__,
                               random_intercept_raw_2dim__);
      std::vector<double> random_intercept_sigma_mu;
      random_intercept_sigma_mu = std::vector<double>(random_intercept_sigma_mu_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__;
           ++sym1__) {
        current_statement__ = 7;
        assign(random_intercept_sigma_mu,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable random_intercept_sigma_mu");}
      std::vector<double> random_intercept_sigma_sigma;
      random_intercept_sigma_sigma = std::vector<double>(random_intercept_sigma_sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
           ++sym1__) {
        current_statement__ = 8;
        assign(random_intercept_sigma_sigma,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable random_intercept_sigma_sigma");}
      Eigen::Matrix<double, 1, -1> random_intercept_sigma_raw;
      random_intercept_sigma_raw = Eigen::Matrix<double, 1, -1>(random_intercept_sigma_raw_1dim__);
      stan::math::fill(random_intercept_sigma_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      random_intercept_sigma_raw = in__.row_vector(
                                     random_intercept_sigma_raw_1dim__);
      std::vector<double> zero_random_intercept;
      zero_random_intercept = std::vector<double>(zero_random_intercept_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(zero_random_intercept,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable zero_random_intercept");}
      Eigen::Matrix<double, -1, -1> beta_raw;
      beta_raw = Eigen::Matrix<double, -1, -1>(C, M);
      stan::math::fill(beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> precision;
      precision = Eigen::Matrix<double, -1, -1>(M, N);
      stan::math::fill(precision, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(C, M);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> random_intercept_minus_sum;
      random_intercept_minus_sum = Eigen::Matrix<double, -1, -1>(N_minus_sum, random_intercept_minus_sum_2dim__);
      stan::math::fill(random_intercept_minus_sum, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> random_intercept_sigma;
      random_intercept_sigma = Eigen::Matrix<double, 1, -1>(random_intercept_sigma_1dim__);
      stan::math::fill(random_intercept_sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> beta_random_intercept_raw;
      beta_random_intercept_raw = Eigen::Matrix<double, -1, -1>(N_grouping, beta_random_intercept_raw_2dim__);
      stan::math::fill(beta_random_intercept_raw, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= beta_raw_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_raw_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "beta_raw_raw"));}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          vars__.emplace_back(
            rvalue(alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "alpha"));}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prec_coeff[(sym1__ - 1)]);}
      vars__.emplace_back(prec_sd);
      vars__.emplace_back(mix_p);
      for (int sym1__ = 1; sym1__ <= random_intercept_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= random_intercept_raw_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(random_intercept_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "random_intercept_raw"));}}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_raw_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
        vars__.emplace_back(zero_random_intercept[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      assign(precision, nil_index_list(), transpose(multiply(Xa, alpha)),
        "assigning variable precision");
      current_statement__ = 18;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 17;
        assign(beta_raw,
          cons_list(index_uni(c), cons_list(index_omni(), nil_index_list())),
          sum_to_zero_QR(
            rvalue(beta_raw_raw,
              cons_list(index_uni(c),
                cons_list(index_omni(), nil_index_list())), "beta_raw_raw"),
            Q_r, pstream__), "assigning variable beta_raw");}
      current_statement__ = 19;
      assign(beta, nil_index_list(), beta_raw, "assigning variable beta");
      current_statement__ = 38;
      if (logical_gt(N_random_intercepts, 0)) {
        current_statement__ = 20;
        assign(random_intercept_sigma, nil_index_list(),
          add(random_intercept_sigma_mu[(1 - 1)],
            multiply(random_intercept_sigma_sigma[(1 - 1)],
              random_intercept_sigma_raw)),
          "assigning variable random_intercept_sigma");
        current_statement__ = 29;
        for (int a = 1; a <= N_minus_sum; ++a) {
          current_statement__ = 21;
          validate_non_negative_index("temp_random_intercept", "M - 1",
                                      (M - 1));
          Eigen::Matrix<double, 1, -1> temp_random_intercept;
          temp_random_intercept = Eigen::Matrix<double, 1, -1>((M - 1));
          stan::math::fill(temp_random_intercept, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 22;
          assign(temp_random_intercept, nil_index_list(),
            rep_row_vector(0, (M - 1)),
            "assigning variable temp_random_intercept");
          current_statement__ = 26;
          for (int n = 1; n <= N_random_intercepts; ++n) {
            current_statement__ = 24;
            if (logical_eq(paring_cov_random_intercept[(n - 1)][(1 - 1)], a)) {
              current_statement__ = 23;
              assign(temp_random_intercept, nil_index_list(),
                add(stan::model::deep_copy(temp_random_intercept),
                  rvalue(random_intercept_raw,
                    cons_list(index_uni(n), nil_index_list()),
                    "random_intercept_raw")),
                "assigning variable temp_random_intercept");
            } }
          current_statement__ = 27;
          assign(random_intercept_minus_sum,
            cons_list(index_uni(a), nil_index_list()),
            multiply(temp_random_intercept, -1),
            "assigning variable random_intercept_minus_sum");}
        current_statement__ = 36;
        for (int n = 1; n <= N_grouping; ++n) {
          current_statement__ = 34;
          if (logical_gt(idx_group_random_intercepts[(n - 1)][(2 - 1)], 0)) {
            current_statement__ = 33;
            assign(beta_random_intercept_raw,
              cons_list(
                index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                nil_index_list()),
              elt_multiply(
                rvalue(random_intercept_raw,
                  cons_list(
                    index_uni(idx_group_random_intercepts[(n - 1)][(2 - 1)]),
                    nil_index_list()), "random_intercept_raw"),
                stan::math::exp(divide(random_intercept_sigma, 3.0))),
              "assigning variable beta_random_intercept_raw");
          } else {
            current_statement__ = 32;
            if (logical_lt(idx_group_random_intercepts[(n - 1)][(2 - 1)], 0)) {
              current_statement__ = 31;
              assign(beta_random_intercept_raw,
                cons_list(
                  index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                  nil_index_list()),
                elt_multiply(
                  rvalue(random_intercept_minus_sum,
                    cons_list(
                      index_uni(-idx_group_random_intercepts[(n - 1)][
                                  (2 - 1)]), nil_index_list()),
                    "random_intercept_minus_sum"),
                  stan::math::exp(divide(random_intercept_sigma, 3.0))),
                "assigning variable beta_random_intercept_raw");
            } else {
              current_statement__ = 30;
              assign(beta_random_intercept_raw,
                cons_list(
                  index_uni(idx_group_random_intercepts[(n - 1)][(1 - 1)]),
                  nil_index_list()),
                rep_row_vector(
                  (zero_random_intercept[(logical_gt(N_random_intercepts, 0)
                                           - 1)] *
                    stan::math::exp(
                      (random_intercept_sigma_mu[(1 - 1)] / 3.0))), (M - 1)),
                "assigning variable beta_random_intercept_raw");
            }
          }}
      } 
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta_raw,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "beta_raw"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(precision,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "precision"));}}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "beta"));}
        }
        for (int sym1__ = 1; sym1__ <= random_intercept_minus_sum_2dim__;
             ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_minus_sum; ++sym2__) {
            vars__.emplace_back(
              rvalue(random_intercept_minus_sum,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "random_intercept_minus_sum"));}}
        for (int sym1__ = 1; sym1__ <= random_intercept_sigma_1dim__;
             ++sym1__) {
          vars__.emplace_back(random_intercept_sigma[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= beta_random_intercept_raw_2dim__;
             ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta_random_intercept_raw,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "beta_random_intercept_raw"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> alpha_normalised;
      alpha_normalised = Eigen::Matrix<double, -1, -1>(A, M);
      stan::math::fill(alpha_normalised, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 39;
      assign(alpha_normalised, nil_index_list(), alpha,
        "assigning variable alpha_normalised");
      Eigen::Matrix<double, -1, -1> beta_random_intercept;
      beta_random_intercept = Eigen::Matrix<double, -1, -1>(N_grouping, M);
      stan::math::fill(beta_random_intercept, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 48;
      if (intercept_in_design) {
        current_statement__ = 46;
        if (logical_gt(A, 1)) {
          current_statement__ = 45;
          for (int a = 2; a <= A; ++a) {
            current_statement__ = 44;
            assign(alpha_normalised,
              cons_list(index_uni(a), nil_index_list()),
              subtract(
                rvalue(alpha, cons_list(index_uni(a), nil_index_list()),
                  "alpha"),
                multiply(
                  rvalue(beta, cons_list(index_uni(a), nil_index_list()),
                    "beta"), prec_coeff[(2 - 1)])),
              "assigning variable alpha_normalised");}
        } 
      } else {
        current_statement__ = 42;
        for (int a = 1; a <= A; ++a) {
          current_statement__ = 41;
          assign(alpha_normalised, cons_list(index_uni(a), nil_index_list()),
            subtract(
              rvalue(alpha, cons_list(index_uni(a), nil_index_list()),
                "alpha"),
              multiply(
                rvalue(beta, cons_list(index_uni(a), nil_index_list()),
                  "beta"), prec_coeff[(2 - 1)])),
            "assigning variable alpha_normalised");}
      }
      current_statement__ = 49;
      assign(beta_random_intercept,
        cons_list(index_omni(),
          cons_list(index_min_max(1, (M - 1)), nil_index_list())),
        beta_random_intercept_raw, "assigning variable beta_random_intercept");
      current_statement__ = 51;
      for (int n = 1; n <= N_grouping; ++n) {
        current_statement__ = 50;
        assign(beta_random_intercept,
          cons_list(index_uni(n), cons_list(index_uni(M), nil_index_list())),
          -sum(
             rvalue(beta_random_intercept_raw,
               cons_list(index_uni(n),
                 cons_list(index_omni(), nil_index_list())),
               "beta_random_intercept_raw")),
          "assigning variable beta_random_intercept");}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          vars__.emplace_back(
            rvalue(alpha_normalised,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "alpha_normalised"));}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_random_intercept,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "beta_random_intercept"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> beta_raw_raw;
      beta_raw_raw = Eigen::Matrix<double, -1, -1>(C, beta_raw_raw_2dim__);
      stan::math::fill(beta_raw_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_raw_raw_flat__;
        current_statement__ = 1;
        assign(beta_raw_raw_flat__, nil_index_list(),
          context__.vals_r("beta_raw_raw"),
          "assigning variable beta_raw_raw_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= beta_raw_raw_2dim__; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            current_statement__ = 1;
            assign(beta_raw_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_raw_raw_flat__[(pos__ - 1)],
              "assigning variable beta_raw_raw");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> alpha;
      alpha = Eigen::Matrix<double, -1, -1>(A, M);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 2;
            assign(alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              alpha_flat__[(pos__ - 1)], "assigning variable alpha");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<double> prec_coeff;
      prec_coeff = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(prec_coeff, nil_index_list(), context__.vals_r("prec_coeff"),
        "assigning variable prec_coeff");
      double prec_sd;
      prec_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prec_sd = context__.vals_r("prec_sd")[(1 - 1)];
      double prec_sd_free__;
      prec_sd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prec_sd_free__ = stan::math::lb_free(prec_sd, 0);
      double mix_p;
      mix_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mix_p = context__.vals_r("mix_p")[(1 - 1)];
      double mix_p_free__;
      mix_p_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mix_p_free__ = stan::math::lub_free(mix_p, 0, 1);
      Eigen::Matrix<double, -1, -1> random_intercept_raw;
      random_intercept_raw = Eigen::Matrix<double, -1, -1>(random_intercept_raw_1dim__, random_intercept_raw_2dim__);
      stan::math::fill(random_intercept_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> random_intercept_raw_flat__;
        current_statement__ = 6;
        assign(random_intercept_raw_flat__, nil_index_list(),
          context__.vals_r("random_intercept_raw"),
          "assigning variable random_intercept_raw_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= random_intercept_raw_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= random_intercept_raw_1dim__;
               ++sym2__) {
            current_statement__ = 6;
            assign(random_intercept_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              random_intercept_raw_flat__[(pos__ - 1)],
              "assigning variable random_intercept_raw");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      std::vector<double> random_intercept_sigma_mu;
      random_intercept_sigma_mu = std::vector<double>(random_intercept_sigma_mu_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(random_intercept_sigma_mu, nil_index_list(),
        context__.vals_r("random_intercept_sigma_mu"),
        "assigning variable random_intercept_sigma_mu");
      std::vector<double> random_intercept_sigma_sigma;
      random_intercept_sigma_sigma = std::vector<double>(random_intercept_sigma_sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(random_intercept_sigma_sigma, nil_index_list(),
        context__.vals_r("random_intercept_sigma_sigma"),
        "assigning variable random_intercept_sigma_sigma");
      Eigen::Matrix<double, 1, -1> random_intercept_sigma_raw;
      random_intercept_sigma_raw = Eigen::Matrix<double, 1, -1>(random_intercept_sigma_raw_1dim__);
      stan::math::fill(random_intercept_sigma_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> random_intercept_sigma_raw_flat__;
        current_statement__ = 9;
        assign(random_intercept_sigma_raw_flat__, nil_index_list(),
          context__.vals_r("random_intercept_sigma_raw"),
          "assigning variable random_intercept_sigma_raw_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= random_intercept_sigma_raw_1dim__;
             ++sym1__) {
          current_statement__ = 9;
          assign(random_intercept_sigma_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            random_intercept_sigma_raw_flat__[(pos__ - 1)],
            "assigning variable random_intercept_sigma_raw");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> zero_random_intercept;
      zero_random_intercept = std::vector<double>(zero_random_intercept_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(zero_random_intercept, nil_index_list(),
        context__.vals_r("zero_random_intercept"),
        "assigning variable zero_random_intercept");
      for (int sym1__ = 1; sym1__ <= beta_raw_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_raw_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "beta_raw_raw"));}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          vars__.emplace_back(
            rvalue(alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "alpha"));}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prec_coeff[(sym1__ - 1)]);}
      vars__.emplace_back(prec_sd_free__);
      vars__.emplace_back(mix_p_free__);
      for (int sym1__ = 1; sym1__ <= random_intercept_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= random_intercept_raw_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(random_intercept_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "random_intercept_raw"));}}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_raw_1dim__;
           ++sym1__) {
        vars__.emplace_back(random_intercept_sigma_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
        vars__.emplace_back(zero_random_intercept[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta_raw_raw");
    names__.emplace_back("alpha");
    names__.emplace_back("prec_coeff");
    names__.emplace_back("prec_sd");
    names__.emplace_back("mix_p");
    names__.emplace_back("random_intercept_raw");
    names__.emplace_back("random_intercept_sigma_mu");
    names__.emplace_back("random_intercept_sigma_sigma");
    names__.emplace_back("random_intercept_sigma_raw");
    names__.emplace_back("zero_random_intercept");
    names__.emplace_back("beta_raw");
    names__.emplace_back("precision");
    names__.emplace_back("beta");
    names__.emplace_back("random_intercept_minus_sum");
    names__.emplace_back("random_intercept_sigma");
    names__.emplace_back("beta_random_intercept_raw");
    names__.emplace_back("alpha_normalised");
    names__.emplace_back("beta_random_intercept");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(C),
                                             static_cast<size_t>(beta_raw_raw_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(random_intercept_raw_1dim__)
                                             ,
                                             static_cast<size_t>(random_intercept_raw_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(random_intercept_sigma_mu_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(random_intercept_sigma_sigma_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(random_intercept_sigma_raw_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(zero_random_intercept_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(C),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(C),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_minus_sum)
                                             ,
                                             static_cast<size_t>(random_intercept_minus_sum_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(random_intercept_sigma_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_grouping),
                                             static_cast<size_t>(beta_random_intercept_raw_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_grouping),
                                             static_cast<size_t>(M)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_raw_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_raw_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prec_coeff" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "prec_sd");
    param_names__.emplace_back(std::string() + "mix_p");
    for (int sym1__ = 1; sym1__ <= random_intercept_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= random_intercept_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "random_intercept_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_raw_1dim__;
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zero_random_intercept" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= random_intercept_minus_sum_2dim__;
           ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_minus_sum; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "random_intercept_minus_sum" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "random_intercept_sigma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= beta_random_intercept_raw_2dim__;
           ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_random_intercept_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha_normalised" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_random_intercept" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_raw_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_raw_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prec_coeff" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "prec_sd");
    param_names__.emplace_back(std::string() + "mix_p");
    for (int sym1__ = 1; sym1__ <= random_intercept_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= random_intercept_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "random_intercept_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_sigma_1dim__;
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= random_intercept_sigma_raw_1dim__;
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "random_intercept_sigma_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zero_random_intercept_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zero_random_intercept" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= random_intercept_minus_sum_2dim__;
           ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_minus_sum; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "random_intercept_minus_sum" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= random_intercept_sigma_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "random_intercept_sigma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= beta_random_intercept_raw_2dim__;
           ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_random_intercept_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha_normalised" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_grouping; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_random_intercept" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_raw_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << beta_raw_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"parameters\"},{\"name\":\"prec_coeff\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"prec_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mix_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"random_intercept_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << random_intercept_raw_1dim__ << ",\"cols\":" << random_intercept_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_mu\",\"type\":{\"name\":\"array\",\"length\":" << random_intercept_sigma_mu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_sigma\",\"type\":{\"name\":\"array\",\"length\":" << random_intercept_sigma_sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" << random_intercept_sigma_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zero_random_intercept\",\"type\":{\"name\":\"array\",\"length\":" << zero_random_intercept_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"precision\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"random_intercept_minus_sum\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_minus_sum << ",\"cols\":" << random_intercept_minus_sum_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"random_intercept_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << random_intercept_sigma_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_random_intercept_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_grouping << ",\"cols\":" << beta_random_intercept_raw_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_normalised\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_random_intercept\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_grouping << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_raw_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << beta_raw_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"parameters\"},{\"name\":\"prec_coeff\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"prec_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mix_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"random_intercept_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << random_intercept_raw_1dim__ << ",\"cols\":" << random_intercept_raw_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_mu\",\"type\":{\"name\":\"array\",\"length\":" << random_intercept_sigma_mu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_sigma\",\"type\":{\"name\":\"array\",\"length\":" << random_intercept_sigma_sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"random_intercept_sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" << random_intercept_sigma_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zero_random_intercept\",\"type\":{\"name\":\"array\",\"length\":" << zero_random_intercept_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"precision\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << C << ",\"cols\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"random_intercept_minus_sum\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_minus_sum << ",\"cols\":" << random_intercept_minus_sum_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"random_intercept_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << random_intercept_sigma_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_random_intercept_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_grouping << ",\"cols\":" << beta_random_intercept_raw_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_normalised\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_random_intercept\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_grouping << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_glm_multi_beta_binomial_namespace::model_glm_multi_beta_binomial;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_glm_multi_beta_binomial_namespace::profiles__;
}
#endif
#endif
