// Generated by rstantools.  Do not edit by hand.

/*
    sccomp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sccomp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sccomp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_glm_multi_beta_binomial_simulate_data_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 13, column 2 to column 21)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 14, column 2 to column 24)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 17, column 2 to column 31)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 18, column 2 to column 22)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 19, column 2 to column 20)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 20, column 2 to column 31)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 21, column 2 to column 24)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 22, column 2 to column 35)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 24, column 2 to column 29)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 29, column 7 to column 48)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 28, column 13 to column 65)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 28, column 2 to line 29, column 48)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 33, column 30 to column 123)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 33, column 16 to column 123)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 33, column 2 to column 123)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 34, column 2 to column 33)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 36, column 2 to column 54)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 37, column 16 to column 41)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 37, column 2 to column 41)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 39, column 4 to line 43, column 8)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 38, column 23 to line 44, column 3)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 38, column 2 to line 44, column 3)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 46, column 16 to column 67)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 46, column 2 to column 67)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 47, column 16 to column 103)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 47, column 2 to column 103)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 2, column 2 to column 8)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 3, column 2 to column 8)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 4, column 2 to column 8)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 5, column 2 to column 8)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 6, column 15 to column 16)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 6, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 7, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 7, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 7, column 2 to column 17)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 8, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 8, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 8, column 2 to column 18)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 9, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 9, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 9, column 2 to column 19)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 10, column 2 to column 39)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 17, column 25 to column 26)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 17, column 28 to column 29)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 18, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 18, column 12 to column 13)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 19, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 19, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 20, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 20, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 21, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 21, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 22, column 9 to column 10)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 22, column 11 to column 12)",
                                                      " (in 'glm_multi_beta_binomial_simulate_data', line 24, column 26 to column 27)"};
#include <stan_meta_header.hpp>
class model_glm_multi_beta_binomial_simulate_data final : public model_base_crtp<model_glm_multi_beta_binomial_simulate_data> {
 private:
  int N;
  int M;
  int C;
  int A;
  std::vector<int> exposure;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, -1> XA;
  Eigen::Matrix<double, -1, -1> beta;
  double variability_multiplier;
 
 public:
  ~model_glm_multi_beta_binomial_simulate_data() { }
  
  inline std::string model_name() const final { return "model_glm_multi_beta_binomial_simulate_data"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_glm_multi_beta_binomial_simulate_data(stan::io::var_context& context__,
                                              unsigned int random_seed__ = 0,
                                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_glm_multi_beta_binomial_simulate_data_namespace::model_glm_multi_beta_binomial_simulate_data";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","C","int",
          context__.to_vec());
      C = std::numeric_limits<int>::min();
      
      current_statement__ = 29;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization","A","int",
          context__.to_vec());
      A = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      A = context__.vals_i("A")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("exposure", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","exposure","int",
          context__.to_vec(N));
      exposure = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 32;
      assign(exposure, nil_index_list(), context__.vals_i("exposure"),
        "assigning variable exposure");
      current_statement__ = 33;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 34;
      validate_non_negative_index("X", "C", C);
      current_statement__ = 35;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N, C));
      X = Eigen::Matrix<double, -1, -1>(N, C);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 35;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 35;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 35;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 36;
      validate_non_negative_index("XA", "A", A);
      current_statement__ = 37;
      validate_non_negative_index("XA", "A", A);
      current_statement__ = 38;
      context__.validate_dims("data initialization","XA","double",
          context__.to_vec(A, A));
      XA = Eigen::Matrix<double, -1, -1>(A, A);
      stan::math::fill(XA, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> XA_flat__;
        current_statement__ = 38;
        assign(XA_flat__, nil_index_list(), context__.vals_r("XA"),
          "assigning variable XA_flat__");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 38;
            assign(XA,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              XA_flat__[(pos__ - 1)], "assigning variable XA");
            current_statement__ = 38;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 39;
      validate_non_negative_index("beta", "C", C);
      current_statement__ = 40;
      validate_non_negative_index("beta", "M", M);
      current_statement__ = 41;
      context__.validate_dims("data initialization","beta","double",
          context__.to_vec(C, M));
      beta = Eigen::Matrix<double, -1, -1>(C, M);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 41;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 41;
          for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
            current_statement__ = 41;
            assign(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 41;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 42;
      context__.validate_dims("data initialization","variability_multiplier",
          "double",context__.to_vec());
      variability_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 42;
      variability_multiplier = context__.vals_r("variability_multiplier")[
          (1 - 1)];
      current_statement__ = 42;
      current_statement__ = 42;
      check_greater_or_equal(function__, "variability_multiplier",
                             variability_multiplier, 0);
      current_statement__ = 43;
      validate_non_negative_index("counts_uncorrected", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("counts_uncorrected", "M", M);
      current_statement__ = 45;
      validate_non_negative_index("counts", "N", N);
      current_statement__ = 46;
      validate_non_negative_index("counts", "M", M);
      current_statement__ = 47;
      validate_non_negative_index("alpha", "A", A);
      current_statement__ = 48;
      validate_non_negative_index("alpha", "M", M);
      current_statement__ = 49;
      validate_non_negative_index("mu", "M", M);
      current_statement__ = 50;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 51;
      validate_non_negative_index("precision", "M", M);
      current_statement__ = 52;
      validate_non_negative_index("precision", "N", N);
      current_statement__ = 53;
      validate_non_negative_index("beta_intercept_slope", "A", A);
      current_statement__ = 54;
      validate_non_negative_index("beta_intercept_slope", "M", M);
      current_statement__ = 55;
      validate_non_negative_index("generated_exposure", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 2;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_glm_multi_beta_binomial_simulate_data_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> prec_coeff;
      prec_coeff = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(prec_coeff, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable prec_coeff");}
      local_scalar_t__ prec_sd;
      prec_sd = DUMMY_VAR__;
      
      current_statement__ = 2;
      prec_sd = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        prec_sd = stan::math::lb_constrain(prec_sd, 0, lp__);
      } else {
        current_statement__ = 2;
        prec_sd = stan::math::lb_constrain(prec_sd, 0);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_glm_multi_beta_binomial_simulate_data_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> prec_coeff;
      prec_coeff = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(prec_coeff, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable prec_coeff");}
      double prec_sd;
      prec_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prec_sd = in__.scalar();
      current_statement__ = 2;
      prec_sd = stan::math::lb_constrain(prec_sd, 0);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prec_coeff[(sym1__ - 1)]);}
      vars__.emplace_back(prec_sd);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<int>> counts_uncorrected;
      counts_uncorrected = std::vector<std::vector<int>>(N, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      Eigen::Matrix<double, -1, -1> counts;
      counts = Eigen::Matrix<double, -1, -1>(N, M);
      stan::math::fill(counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> alpha;
      alpha = Eigen::Matrix<double, -1, -1>(A, M);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> mu;
      mu = Eigen::Matrix<double, -1, -1>(M, N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(mu, nil_index_list(), transpose(multiply(X, beta)),
        "assigning variable mu");
      Eigen::Matrix<double, -1, -1> precision;
      precision = Eigen::Matrix<double, -1, -1>(M, N);
      stan::math::fill(precision, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> beta_intercept_slope;
      beta_intercept_slope = Eigen::Matrix<double, -1, -1>(A, M);
      stan::math::fill(beta_intercept_slope, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> generated_exposure;
      generated_exposure = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      if (logical_eq(A, 1)) {
        current_statement__ = 11;
        assign(beta_intercept_slope, nil_index_list(),
          to_matrix(
            rvalue(beta,
              cons_list(index_uni(A),
                cons_list(index_omni(), nil_index_list())), "beta"), A, M, 0),
          "assigning variable beta_intercept_slope");
      } else {
        current_statement__ = 10;
        assign(beta_intercept_slope, nil_index_list(),
          multiply(XA,
            rvalue(beta,
              cons_list(index_min_max(1, A),
                cons_list(index_omni(), nil_index_list())), "beta")),
          "assigning variable beta_intercept_slope");
      }
      current_statement__ = 15;
      for (int a = 1; a <= A; ++a) {
        current_statement__ = 14;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 13;
          assign(alpha,
            cons_list(index_uni(a),
              cons_list(index_uni(m), nil_index_list())),
            normal_rng(
              ((rvalue(beta_intercept_slope,
                  cons_list(index_uni(a),
                    cons_list(index_uni(m), nil_index_list())),
                  "beta_intercept_slope") * prec_coeff[(2 - 1)]) +
                prec_coeff[(1 - 1)]), prec_sd, base_rng__),
            "assigning variable alpha");}}
      current_statement__ = 16;
      assign(precision, nil_index_list(),
        transpose(
          multiply(
            rvalue(X,
              cons_list(index_omni(),
                cons_list(index_min_max(1, A), nil_index_list())), "X"),
            alpha)), "assigning variable precision");
      current_statement__ = 17;
      assign(precision, nil_index_list(),
        subtract(stan::model::deep_copy(precision),
          stan::math::log(variability_multiplier)),
        "assigning variable precision");
      current_statement__ = 19;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 18;
        assign(mu,
          cons_list(index_omni(), cons_list(index_uni(i), nil_index_list())),
          softmax(
            stan::model::deep_copy(
              rvalue(mu,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "mu"))),
          "assigning variable mu");}
      current_statement__ = 22;
      for (int i = 1; i <= cols(mu); ++i) {
        current_statement__ = 20;
        assign(counts_uncorrected,
          cons_list(index_uni(i), cons_list(index_omni(), nil_index_list())),
          beta_binomial_rng(exposure[(i - 1)],
            elt_multiply(
              rvalue(mu,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "mu"),
              stan::math::exp(
                rvalue(precision,
                  cons_list(index_omni(),
                    cons_list(index_uni(i), nil_index_list())), "precision"))),
            elt_multiply(
              subtract(1.0,
                rvalue(mu,
                  cons_list(index_omni(),
                    cons_list(index_uni(i), nil_index_list())), "mu")),
              stan::math::exp(
                rvalue(precision,
                  cons_list(index_omni(),
                    cons_list(index_uni(i), nil_index_list())), "precision"))),
            base_rng__), "assigning variable counts_uncorrected");}
      current_statement__ = 24;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 23;
        assign(generated_exposure, cons_list(index_uni(n), nil_index_list()),
          sum(counts_uncorrected[(n - 1)]),
          "assigning variable generated_exposure");}
      current_statement__ = 26;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 25;
        assign(counts, cons_list(index_uni(n), nil_index_list()),
          multiply(
            divide(to_row_vector(counts_uncorrected[(n - 1)]),
              generated_exposure[(n - 1)]), exposure[(n - 1)]),
          "assigning variable counts");}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            counts_uncorrected[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "counts"));}
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          vars__.emplace_back(
            rvalue(alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "alpha"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(
            rvalue(mu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "mu"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(
            rvalue(precision,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "precision"));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_intercept_slope,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "beta_intercept_slope"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(generated_exposure[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> prec_coeff;
      prec_coeff = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(prec_coeff, nil_index_list(), context__.vals_r("prec_coeff"),
        "assigning variable prec_coeff");
      double prec_sd;
      prec_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prec_sd = context__.vals_r("prec_sd")[(1 - 1)];
      double prec_sd_free__;
      prec_sd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prec_sd_free__ = stan::math::lb_free(prec_sd, 0);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prec_coeff[(sym1__ - 1)]);}
      vars__.emplace_back(prec_sd_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("prec_coeff");
    names__.emplace_back("prec_sd");
    names__.emplace_back("counts_uncorrected");
    names__.emplace_back("counts");
    names__.emplace_back("alpha");
    names__.emplace_back("mu");
    names__.emplace_back("precision");
    names__.emplace_back("beta_intercept_slope");
    names__.emplace_back("generated_exposure");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prec_coeff" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "prec_sd");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "counts_uncorrected" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "counts" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_intercept_slope" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generated_exposure" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prec_coeff" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "prec_sd");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "counts_uncorrected" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "counts" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_intercept_slope" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generated_exposure" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"prec_coeff\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"prec_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"counts_uncorrected\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"counts\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"precision\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_intercept_slope\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"generated_exposure\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"prec_coeff\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"prec_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"counts_uncorrected\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"counts\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"precision\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_intercept_slope\",\"type\":{\"name\":\"matrix\",\"rows\":" << A << ",\"cols\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"generated_exposure\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_glm_multi_beta_binomial_simulate_data_namespace::model_glm_multi_beta_binomial_simulate_data;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_glm_multi_beta_binomial_simulate_data_namespace::profiles__;
}
#endif
#endif
